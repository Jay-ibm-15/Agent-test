name: Check for Hardcoded Secrets

on:
  pull_request:
    branches: [main, master, develop]
  push:
    branches: [main, master, develop]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  secret-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Custom Pattern Check
        id: custom-scan
        run: |
          echo "🔍 Scanning for hardcoded secrets..."

          PATTERNS=(
            "password\\s*=\\s*['\"][^'\"]+['\"]"
            "api[_-]?key\\s*=\\s*['\"][^'\"]+['\"]"
            "secret\\s*=\\s*['\"][^'\"]+['\"]"
            "token\\s*=\\s*['\"][^'\"]+['\"]"
            "aws_access_key_id"
            "aws_secret_access_key"
            "AKIA[0-9A-Z]{16}"
            "-----BEGIN RSA PRIVATE KEY-----"
            "-----BEGIN PRIVATE KEY-----"
            "-----BEGIN OPENSSH PRIVATE KEY-----"
            "sk_live_[0-9a-zA-Z]{24}"
            "pk_live_[0-9a-zA-Z]{24}"
            "AIza[0-9A-Za-z\\-_]{35}"
            "ya29\\.[0-9A-Za-z\\-_]+"
            "ghp_[0-9a-zA-Z]{36}"
            "github_pat_[0-9a-zA-Z]{22}_[0-9a-zA-Z]{59}"
            "glpat-[0-9a-zA-Z\\-_]{20}"
            "sk-[0-9a-zA-Z]{48}"
            "SG\\.[0-9A-Za-z\\-_]{22}\\.[0-9A-Za-z\\-_]{43}"
            "xox[baprs]-[0-9a-zA-Z]{10,48}"
            "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent\\.com"
            "sq0csp-[0-9A-Za-z\\-_]{43}"
            "access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-f]{32}"
            "EAACEdEose0cBA[0-9A-Za-z]+"
            "mongodb\\+srv:\\/\\/[^\\s]+"
            "postgres:\\/\\/[^\\s]+"
            "mysql:\\/\\/[^\\s]+"
          )

          FOUND=0
          TEMP_FILE=$(mktemp)

          if [ "${{ github.event_name }}" == "pull_request" ]; then
            FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          if [ -z "$FILES" ]; then
            FILES=$(find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" -not -path "*/vendor/*" -not -path "*/dist/*" -not -path "*/build/*")
          fi

          for PATTERN in "${PATTERNS[@]}"; do
            echo "$FILES" | while read -r file; do
              if [ -f "$file" ]; then
                MATCHES=$(grep -inE "$PATTERN" "$file" 2>/dev/null || true)
                if [ ! -z "$MATCHES" ]; then
                  echo "⚠️ Potential secret found in: $file"
                  echo "$MATCHES"
                  echo "---"
                  FOUND=1
                  echo "1" >> $TEMP_FILE
                fi
              fi
            done
          done

          if [ -s $TEMP_FILE ]; then
            echo "::error::Hardcoded secrets or sensitive data detected in the code"
            rm -f $TEMP_FILE
            echo "secrets_found=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
            rm -f $TEMP_FILE
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR (if secrets found)
        if: steps.custom-scan.outputs.secrets_found == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: [
                '🚨 **SECURITY ALERT**: Potential hardcoded secrets detected!',
                '',
                'This PR may contain hardcoded API keys, passwords, tokens, or other sensitive information.',
                '',
                '**Action Required:**',
                '1. Review the workflow logs to identify the detected patterns',
                '2. Remove any hardcoded secrets from your code',
                '3. Use environment variables or a secrets management service',
                '4. Rotate any exposed credentials immediately',
                '',
                '**Best Practices:**',
                '- Use GitHub Secrets for sensitive data',
                '- Use `.env` files (and add them to `.gitignore`)',
                '- Use secret management tools (AWS Secrets Manager, HashiCorp Vault, etc.)',
                '- Never commit credentials to version control',
                '',
                '**If you believe this is a false positive**, please review the patterns and adjust accordingly.'
              ].join('\n')
            })
